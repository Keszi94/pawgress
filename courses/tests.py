from django.test import TestCase
from django.urls import reverse
from decimal import Decimal
from django.contrib.auth.models import User

from courses.forms import CourseForm
from courses.models import Course, Category

# Create your tests here.


# ------- Models
class TestCourseModels(TestCase):
    """
    Test the Course and the Category models:
    - Course
        * returns a correct string
        * slug is autogenerated from the title
    - Category
        * returns a correct string
        * slug is autogenerated from the title
    """
    def setUp(self):
        self.category = Category.objects.create(
            name="Obedience",
            slug="obedience"
            )
        self.course = Course.objects.create(
            title="Loose Leash Walking",
            description="How to walk your dog without pulling",
            content="Content and more content",
            price=Decimal("9.99"),
            category=self.category,
            time_frame='2w'
        )

    def test_str_returns_title(self):
        # test that __str__ returns the course title
        self.assertEqual(str(self.course), "Loose Leash Walking")

    def test_slug_autogenerated(self):
        # test that the slug is generated correctly from title
        self.assertEqual(self.course.slug, "loose-leash-walking")

    def test_category_slug_autogenerated(self):
        # test if the slug is autogenerated for categories
        self.assertEqual(self.category.slug, "obedience")

    def test_course_duration_display(self):
        # test the time-frame
        self.assertEqual(self.course.get_time_frame_display(), "2 Weeks")

    # ------- Views (same testcase as the model)
    """
    Tests for the course views:
    - returns a 200
    - uses the correct template
    - includes the expected course in context
    """

    def test_all_courses_view(self):
        # test that the view returns http 200
        response = self.client.get(reverse('courses'))
        self.assertEqual(response.status_code, 200)

    def test_all_course_view_template(self):
        # test that the correct template is used
        response = self.client.get(reverse('courses'))
        self.assertTemplateUsed(response, 'courses/courses.html')

    def test_all_courses_view_context(self):
        # test that the course appears in the context data
        response = self.client.get(reverse('courses'))
        self.assertIn(self.course, response.context['courses'])


# ------- Form
class TestCourseForm(TestCase):
    """
    Tests the CourseForm
    - the form is valid with all data required
    - form is invalid when required fields are missing
    """
    def setUp(self):
        self.category = Category.objects.create(name="Test Category")

    def test_course_form_valid_data(self):
        # test if the form is valid when
        # all required fields are filled out correctly
        form = CourseForm(data={
            'title': 'Test Course',
            'description': 'Test description',
            'content': 'Test content',
            'price': '18.99',
            'category': self.category.id,
            'time_frame': '2w',
        })
        self.assertTrue(form.is_valid())

    def test_course_form_missing_fields(self):
        # test if form is invalid when required fields are not filled
        form = CourseForm(data={})
        self.assertFalse(form.is_valid())
        self.assertIn('title', form.errors)
        self.assertIn('price', form.errors)


class CourseCreateViewTest(TestCase):
    """
    Tests for the course_create view:
    - only superusers are allowed to access it
    - regular users and not logged in users should be redirected
    """
    def setUp(self):
        # create a normal user
        self.user = User.objects.create_user(
            username='user',
            password='userpassword'
        )

        # create a superuser
        self.superuser = User.objects.create_superuser(
            username='admin',
            password='adminpassword',
            email='admin@testing.com'
        )

    def test_superuser_can_access(self):
        """
        Superusers should get 200 ok and see the course form
        """
        self.client.login(
            username='admin',
            password='adminpassword'
            )
        response = self.client.get(reverse('course_create'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'courses/course_form.html')

    def test_regular_user_redirect(self):
        """
        Regular user should be redirected to the home page
        """
        self.client.login(
            username='user',
            password='userpassword'
        )
        response = self.client.get(reverse('course_create'))
        self.assertRedirects(response, reverse('home'))

    def test_logged_out_user_redirected(self):
        """
        Looged-out users should be redirected to the hone page
        """
        response = self.client.get(reverse('course_create'))
        self.assertRedirects(response, reverse('home'))
