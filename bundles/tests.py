from django.test import TestCase
from decimal import Decimal
from django.urls import reverse

from bundles.models import Bundle
from courses.models import Course

# Create your tests here.


# Testing the bundle model
class TestBundle(TestCase):
    """
    Thest taht the Bundle model:
    - rturns the correct string
    - the slug is autogenerated
    - get_courses_count returns the expected number of related courses
    """
    # Test course instance
    def setUp(self):
        self.course1 = Course.objects.create(
            title="Course 1",
            price=Decimal("10.00")
            )
        self.course2 = Course.objects.create(
            title="Course 2",
            price=Decimal("20.00")
            )
        # Create a bundle with a course assigned
        self.bundle = Bundle.objects.create(
            title="Test Bundle",
            description="A test bundle",
            price=Decimal("25.00")
        )
        self.bundle.courses.set([self.course1, self.course2])

    def test_str_returns_title(self):
        self.assertEqual(str(self.bundle), "Test Bundle")

    def test_slug_autogenerated(self):
        # test that the slug is generated correctly from title
        self.assertEqual(self.bundle.slug, "test-bundle")

    def test_get_course_count(self):
        # test if the number of courses in the bundle is correct
        self.assertEqual(self.bundle.get_courses_count(), 2)

    def test_update_bundle_totals_signal(self):
        """
        Test that the signal actually recalculates the total
        after the courses are added
        """
        # create another bundle to test the signal
        bundle = Bundle.objects.create(
            title="Signal Test",
            description="Testing signals",
            price=Decimal(30.00)
        )

        # Add a course to trigger the m2m signal
        bundle.courses.add(self.course1)
        bundle.refresh_from_db()

        # test if total_value was updated
        self.assertEqual(bundle.total_value, self.course1.price)
        # test that the savings calculation is correct
        self.assertEqual(
            bundle.savings,
            Decimal(
                (self.course1.price) - bundle.price).quantize(
                    Decimal('0.01')
                    )
        )


# Testing the all_bundles view
class AllBundlesViewTest(TestCase):
    """
    Test that the all_bundles view returns a 200 response and
    includes the correct context data
    """

    def setUp(self):
        # set up one bundle in the database
        Bundle.objects.create(
            title="Test Bundle",
            description="Test description",
            price=29.99
            )

    def test_all_bundles_view_status_code(self):
        # test that the view returns http 200
        response = self.client.get(reverse('bundles'))
        self.assertEqual(response.status_code, 200)

    def test_all_bundles_view_template_used(self):
        # test that the correct template is used
        response = self.client.get(reverse('bundles'))
        self.assertTemplateUsed(response, 'bundles/bundles.html')

    def test_all_bundles_context(self):
        # test that the bundles context has the correct data
        response = self.client.get(reverse('bundles'))
        self.assertIn('bundles', response.context)
        self.assertEqual(len(response.context['bundles']), 1)
        self.assertEqual(response.context['bundles'][0].title, "Test Bundle")
